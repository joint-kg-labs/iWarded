
% =====ORIGINAL VADA PROGRAM PARAMETERS=====
% Number of Input Atoms: 5
% Number of Output Atoms: 3
% Average number of Variables per Atom: 1
% Variance number of Variables per Atom: 1.0
% Number of Existential Rules: 3
% Average number of Existentially Quantified Variables per Rule: 1
% Variance of Existentially Quantified Variables per Rule: 1.0
% Number of Dangerous Rules: 3
% Number of Linear Rules: 6
% Number of Join Rules: 3
% Number of Harmless-Harmless Join Rules with Ward: 3
% Number of Harmless-Harmless Join Rules without Ward: 0
% Number of Harmless-Harmful Joins: 0
% Number of Harmful-Harmful Joins: 0
% Average number of Max Chase Steps: 2
% Number of Max Chase Steps for each Output Atom: 
% out_1->1; out_2->1; out_3->1; 
% Number of Linear Recursions: 1
% Number of Left Join Recursions: 1
% Number of Right Join Recursions: 0
% Number of Non-Linear Join Recursions: 0
% Average Recursion Length: 2
% Length for each Recursion: 
% leftJRec_1->2; linRec_1->4; 
% Number of Selection Conditions: 3
% Average Selectivity: 3
% Number of records in CSV files: 100
% Guardedness of the Program: false
% Name of the Program: tutorialProgram
% ==========================================

% =====ADAPTED VADA PROGRAM PARAMETERS=====
% Number of Input Atoms: 2
% Number of Linear Rules: 11
% Number of Existential Rules: 4
% ==========================================

@output("out_1").
@bind("out_1","csv","generatedPrograms/tutorialProgram/outputCsv/","out_1_csv.csv").
@output("out_2").
@bind("out_2","csv","generatedPrograms/tutorialProgram/outputCsv/","out_2_csv.csv").
@output("out_3").
@bind("out_3","csv","generatedPrograms/tutorialProgram/outputCsv/","out_3_csv.csv").
@input("edb_3").
@bind("edb_3","csv","generatedPrograms/tutorialProgram/inputCsv/","edb_3_csv.csv").
@mapping("edb_3",0,"arg_0","int").
@mapping("edb_3",1,"arg_1","int").
@input("edb_4").
@bind("edb_4","csv","generatedPrograms/tutorialProgram/inputCsv/","edb_4_csv.csv").
@mapping("edb_4",0,"arg_0","int").
@mapping("edb_4",1,"arg_1","int").
idb_1(HARMLESS_1,HARMLESS_2) :- edb_3(HARMLESS_1,HARMLESS_2).
out_1(HARMLESS_1,HARMLESS_2) :- edb_3(HARMLESS_1,HARMLESS_2).
out_2(HARMLESS_1,HARMLESS_2) :- edb_3(HARMLESS_1,HARMLESS_2).
out_3(HARMLESS_1,HARMLESS_2) :- edb_3(HARMLESS_1,HARMLESS_2).
idb_2(HARMLESS_1,HARMLESS_2) :- idb_1(HARMLESS_1,HARMLESS_2), edb_4(HARMLESS_3,HARMLESS_1).
idb_3(HARMLESS_1,HARMLESS_2) :- idb_2(HARMLESS_1,HARMLESS_2).
idb_4(HARMLESS_1,HARMLESS_2) :- idb_3(HARMLESS_1,HARMLESS_2).
idb_1(HARMLESS_1,HARMLESS_2) :- idb_4(HARMLESS_1,HARMLESS_2).
idb_1(HARMLESS_1,HARMLESS_2) :- idb_2(HARMLESS_1,HARMLESS_2), edb_4(HARMLESS_4,HARMLESS_1), HARMLESS_1<38.
idb_5(HARMLESS_1,HARMFUL_1) :- idb_1(HARMLESS_1,HARMLESS_2), HARMLESS_1<=60.
out_3(HARMLESS_1,HARMLESS_1) :- idb_5(HARMLESS_1,HARMFUL_1), HARMLESS_1>3.
out_3(HARMLESS_1,HARMLESS_1) :- idb_5(HARMLESS_1,HARMFUL_1).
out_3(HARMLESS_1,HARMLESS_1) :- idb_5(HARMLESS_1,HARMFUL_1).
out_1(HARMLESS_1,HARMLESS_1) :- idb_5(HARMLESS_1,HARMFUL_1), idb_1(HARMLESS_5,HARMLESS_1).
